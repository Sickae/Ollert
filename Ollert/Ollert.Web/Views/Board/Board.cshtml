@model BoardViewModel

@section Scripts {
    <script type="text/javascript">

        // Event listener-ek regisztrálása

        // ContentEditable div-ekből törli a böngésző által beszúrt <br> tageket ha nincs szöveg
        $(document).on('keyup blur', 'div[contenteditable=true]', function () {
            if ($(this).text().length === 0) {
                $(this).children('br').remove();
            }
        });

        // Új lista hozzáadásnál Enter és Esc gombok működése
        $(document).on('keyup', '.cardlist-new-input', function (event) {
            if (event.keyCode === 13) { // Enter
                addNewCardList();
            } else if (event.keyCode === 27) { // Escape
                toggleNewCardListWindow();
            }
        });

        // Lista cím input kikattintásánál elmenti a módosításokat
        $(document).on('blur', '.cardlist-title', function () {
            if ($(this).val().length > 0) {
                renameCardList(this);
            } else {
                $(this).val($(this).data('title'));
            }
            $(this).caretToStart();
        });

        // Lista cím szerkesztésénél Enter és Esc gombok működése
        $(document).on('keyup', '.cardlist-title', function (event) {
            if (event.keyCode === 13) {
                $(this).blur();
            } else if (event.keyCode === 27) {

                $(this).val('');
                $(this).blur();
            }
        });

        // Kártya nézet megjelenítése
        $(document).on('click', '.cardlist-card-content', function () {
            showCardDetails(this);
        });

        // Kártya nézet elrejtése
        $(document).on('click', '.dim-overlay', function () {
            hideCardDetails();
        });

        // Új kártya hozzáadásnál Enter és Esc gombok működése
        $(document).on('keydown', '.empty-card-input .cardlist-card-name-input', function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                addNewCard(this);
            } else if (event.keyCode === 27) {
                toggleNewCardWindow(this);
            }
        });

        // Kártya szerkesztésnél Enter és Esc gombok működése
        $(document).on('keydown', '.edit-card-input .cardlist-card-name-input', function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                var card = $(this).closest('.cardlist-card');
                var cardId = card.data('id');
                var cardName = card.find('.cardlist-card-name-input').text();

                renameCard(cardId, cardName);
            } else if (event.keyCode === 27) {
                toggleEditCardWindow(this);
            }
        });

        // Kártya szerkesztésnél mentés gomb aktiválása/deaktiválása
        $(document).on('keyup', '.edit-card-input .cardlist-card-name-input', function () {
            var name = $(this).text();
            $(this).closest('.edit-card-input').find('.btn-save').toggleClass('disabled', name.length === 0 || name.length > 255);
        });

        // Kártya szerkesztés mentése
        $(document).on('click', '.edit-card-input .btn-save', function () {
            var card = $(this).closest('.cardlist-card');
            var cardId = card.data('id');
            var cardName = card.find('.cardlist-card-name-input').text();

            renameCard(cardId, cardName);
        });

        // Kártya törlése
        $(document).on('click', '.cardlist-icon-delete', function () {
            deleteCard(this);
        });

        // Kártya nézet bezáró ikon
        $(document).on('click', '.card-details-close', function () {
            hideCardDetails();
        });

        // Kártya nézetben címből kikattintva vissza az eredeti formázásra és a módosítások mentése ha kell
        $(document).on('blur', '.card-details-title', function () {
            var cardId = $(this).closest('.card-details').data('id');
            var cardName = $(this).text();

            if (cardName.length > 0 && cardName.length <= 255) {
                renameCard(cardId, cardName);
            } else {
                var originalName = $('.cardlist-card[data-id=' + cardId + ']').find('.cardlist-card-name').text();
                $(this).text(originalName);
            }
        });

        // Kártya nézetben cím szerkesztésnél Enter és Esc gombok működése
        $(document).on('keydown', '.card-details-title', function (event) {
            var cardId = $(this).closest('.card-details').data('id');

            if (event.keyCode === 13) {
                event.preventDefault();
                var title = $(this).text();
                if (title.length > 0 && title.length <= 255) {
                    $(this).blur();
                }
            }
            else if (event.keyCode === 27) {
                var originalName = $('.cardlist-card[data-id=' + cardId + ']').find('.cardlist-card-name').text();
                $(this).text(originalName).blur();
            }
        });

        // Kártya nézetben leírás mező szerkesztése
        $(document).on('blur', '.card-details-description-text', function () {
            var cardId = $(this).closest('.card-details').data('id');
            var cardDesc = $(this).text();

            $.post('@Url.Action(nameof(CardController.SetDescription), "Card")', {
                id: cardId,
                description: cardDesc
            }).done(function (data) {
                if (data.success) {
                    $('.cardlist-card[data-id=' + cardId + ']').find('#card_Description').val(cardDesc);
                }
            });
        });

        // Kártya nézetben leírás mező szerkesztésnél Esc gomb működése
        $(document).on('keydown', '.card-details-description-text', function (event) {
            if (event.keyCode === 13 && event.ctrlKey) {
                event.preventDefault();
                $(this).blur();
            }
            else if (event.keyCode === 27) {
                var cardId = $(this).closest('.card-details').data('id');
                var originalDesc = $('.cardlist-card[data-id=' + cardId + ']').find('#card_Description').val();
                $(this).text(originalDesc).blur();
            }
        });

        // Kártya nézetben új komment név megadás után kurzor előre mozgatása
        $(document).on('blur', '.comment-new-author', function () {
            $(this).caretToStart();
        });

        // Kártya nézetben új komment mezőben Esc gomb működése
        $(document).on('keydown', '.comment-new-text', function (event) {
            if (event.keyCode === 13 && event.ctrlKey) {
                event.preventDefault();
                $(this).siblings('.btn-save').click();
            }
            else if (event.keyCode === 27) {
                $(this).text('').blur();
            }
        });

        // Kártya nézetben új komment mentés gomb aktiválása/deaktiválása
        $(document).on('keydown keyup', '.comment-new-text', function () {
            $(this).siblings('.btn-save').toggleClass('disabled', $(this).text().length === 0);
        });

        // Kártya nézetben új komment mentése
        $(document).on('click', '.comment-new > .btn-save', function () {
            var comment = $(this).closest('.comment-new');
            var author = comment.find('.comment-new-author').val();
            var text = comment.find('.comment-new-text').text();
            var cardId = comment.closest('.card-details').data('id');

            if (text.length > 0) {
                $.post('@Url.Action(nameof(CardController.AddNewComment), "Card")', {
                    id: cardId,
                    author,
                    text
                }).done(function (data) {
                    if (data.success) {
                        var newComment = $('.helper-divs > .comment').clone();

                        newComment.find('.comment-author').text(author);
                        newComment.find('.comment-date').text(data.date);
                        newComment.find('.comment-text').text(text);

                        comment.find('.comment-new-text').text('').blur();
                        comment.closest('.card-details-content').find('.card-details-comments').append(newComment);
                    }
                })
            }
        });

        // CardList functions

        // Új lista hozzáadása ablak ki/be kapcsolása
        function toggleNewCardListWindow() {
            $('input.cardlist-new-input').val('');
            $('.cardlist-new').toggle();
            var inputContainer = $('.cardlist-new-input-container').slideToggle('fast');

            if (inputContainer.css('display') === 'block') {
                $('.cardlist-new-input').focus();
            }
        }

        // Új lista hozzáadása
        function addNewCardList() {
            var emptyList = $('.helper-divs > .empty-cardlist > .cardlist-container').clone();
            var inputContainer = $('.cardlist-new-input-container').closest('.cardlist-container');
            var title = inputContainer.find('input.cardlist-new-input').val();

            emptyList.find('.cardlist-title').val(title);
            inputContainer.find('.cardlist-new').show();
            inputContainer.find('.cardlist-new-input-container').hide();
            $('.cardlist-list').append(emptyList).append(inputContainer);

            $.post('@Url.Action(nameof(BoardController.AddNewCardList), "Board")', {
                boardId: @Model.Id,
                cardListName: title
            }).done(function (data) {
                if (data.success) {
                    var id = data.id;
                    emptyList.attr('data-id', id);
                    emptyList.find('.cardlist-title').attr('data-title', data.name);
                }
            });
        }

        // Lista átnevezése
        function renameCardList(caller) {
            var listContainer = $(caller).closest('.cardlist-container');
            $.post('@Url.Action(nameof(CardListController.Rename), "CardList")', {
                id: listContainer.data('id'),
                cardListName: $(caller).val()
            }).done(function (data) {
                if (data.success) {
                    $(caller).attr('data-title', data.name);
                } else {
                    $(caller).val($(caller).data('title'));
                }
            });
        }

        // Lista törlése
        function deleteCardList(caller) {
            var list = $(caller).closest('.cardlist-container');
            var listId = list.data('id');

            $.post('@Url.Action(nameof(BoardController.RemoveCardList), "Board")', {
                boardId: @Model.Id,
                cardListId: listId
            }).done(function (data) {
                if (data.success) {
                    list.remove();
                }
            });
        }

        // Card functions

        // Kártya nézet megjelenítése
        function showCardDetails(caller) {
            var dimmer = $('<div>').addClass('dim-overlay');
            var cardDetails = $('.card-details').clone();
            var card = $(caller).closest('.cardlist-card');
            var cardName = card.find('.cardlist-card-name').text();
            var cardDesc = card.find('#card_Description').val();
            var commentDiv = card.find('.cardlist-card-comments').children().clone();

            cardDetails.attr('data-id', card.data('id'));
            cardDetails.find('.card-details-title').text(cardName);
            cardDetails.find('.card-details-description-text').text(cardDesc);
            cardDetails.find('.card-details-comments').append(commentDiv);

            $('body').append(dimmer).append(cardDetails);
        }

        // Kártya nézet elrejtése
        function hideCardDetails() {
            $('.dim-overlay').remove();
            $('.card-details').last().remove();
        }

        // Új kártya hozzáadása ablak ki/be kapcsolása
        function toggleNewCardWindow(caller) {
            var activeWindow = $('.cardlist-list').find('.empty-card-input');

            if (activeWindow.length > 0) {
                var container = activeWindow.closest('.cardlist-container');
                container.find('.cardlist-content.new').removeClass('new');
                container.find('.cardlist-card-new').slideDown('fast');
                activeWindow.slideUp('fast', () => activeWindow.remove());
            } else {
                var container = $(caller).closest('.cardlist-container');
                var inputWindow = $('.helper-divs > .empty-card-input').clone().hide();
                container.find('.cardlist-card-new').slideUp('fast');
                container.find('.cardlist-content').addClass('new').append(inputWindow);
                inputWindow.slideDown('fast', () => inputWindow.find('.cardlist-card-name-input').focus());
            }
        }

        // Kártya szerkesztés ablak ki/be kapcsolása
        function toggleEditCardWindow(caller) {
            var activeWindow = $(caller).closest('.edit-card-input');

            if (activeWindow.length > 0) {
                var card = activeWindow.closest('.cardlist-card');
                activeWindow.remove();

                card.removeClass('edit');
                card.children('div').show();
            } else {
                var card = $(caller).closest('.cardlist-card');
                var cardId = card.data('id');
                var cardName = card.find('.cardlist-card-name').text();
                var cardInput = $('.helper-divs > .edit-card-input').clone();
                var cardNameInput = cardInput.find('.cardlist-card-name-input');

                card.addClass('edit');
                card.children('div').hide();
                card.append(cardInput);
                cardInput.find('.cardlist-card').attr('data-id', cardId);
                cardNameInput.text(cardName).focus();
                setDivCaretToEnd(cardNameInput[0]);
            }
        }

        // Új kártya hozzáadása
        function addNewCard(caller) {
            var emptyCard = $('.helper-divs > .empty-card > .cardlist-card').clone();
            var listContainer = $(caller).closest('.cardlist-container');
            var cardName = $(caller).closest('.empty-card-input').find('.cardlist-card-name-input').text();
            var cardDesc = $('<input id="card_Description" type="hidden">');

            $.post('@Url.Action(nameof(CardListController.AddNewCard), "CardList")', {
                cardListId: listContainer.data('id'),
                cardName: cardName
            }).done(function (data) {
                if (data.success) {
                    emptyCard.attr('data-id', data.id);
                    emptyCard.find('.cardlist-card-name').text(cardName);
                    emptyCard.append(cardDesc);
                    listContainer.find('.cardlist-content').append(emptyCard);
                    toggleNewCardWindow();
                    emptyCard.show();
                }
            });
        }         

        // Kártya átnevezés (nézet ablakból)
        function renameCard(cardId, cardName) {
            $.post('@Url.Action(nameof(CardController.Rename), "Card")', {
                id: cardId,
                cardName
            }).done(function (data) {
                if (data.success) {
                    var card = $('.cardlist-card[data-id=' + cardId + ']');
                    card.find('.cardlist-card-name').text(cardName);
                    toggleEditCardWindow(card[1]);
                }
            });
        }

        // Kártya törlése
        function deleteCard(caller) {
            var cardListId = $(caller).closest('.cardlist-container').data('id');
            var cardId = $(caller).closest('.cardlist-card').data('id');

            $.post('@Url.Action(nameof(CardListController.RemoveCard), "CardList")', {
                cardListId,
                cardId
            }).done(function (data) {
                if (data.success) {
                    $('.cardlist-card[data-id=' + cardId + ']').remove();
                }
            });
        }

        // Összes kártya törlése az adott listából
        function clearAllCards(caller) {
            var list = $(caller).closest('.cardlist-container');
            var listId = list.data('id');

            $.post('@Url.Action(nameof(CardListController.RemoveAllCards), "CardList")', {
                id: listId
            }).done(function (data) {
                if (data.success) {
                    list.find('.cardlist-card').remove();
                }
            });
        }

    </script>
}

<div class="row cardlist-list">
    @foreach (var cardList in Model.CardLists)
    {
        <div class="cardlist-container" data-id="@cardList.Id">
            <div class="cardlist-header">
                <input class="cardlist-title" value="@cardList.Name" data-title="@cardList.Name" maxlength="255" />
                <div class="cardlist-header-menu">
                    <div class="dropdown">
                        <a class="cardlist-header-menu-link muted dropdown-toggle" data-toggle="dropdown">
                            <span class="fas fa-ellipsis-h"></span>
                        </a>
                        <div class="dropdown-menu">
                            <div class="dropdown-header user-select-none">Lista Műveletek</div>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" onclick="clearAllCards(this)">Kártyák ürítése</button>
                            <button class="dropdown-item" onclick="deleteCardList(this)">Törlés</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="cardlist-content">
                @foreach (var card in cardList.Cards)
                {
                    <div class="cardlist-card" data-id="@card.Id">
                        @Html.HiddenFor(x => card.Description)
                        <div class="cardlist-card-comments" style="display: none">
                            @foreach (var comment in card.Comments.OrderBy(x => x.CreationDate))
                            {
                                <div class="comment">
                                    <div class="comment-author user-select-none">@comment.Author</div>
                                    <div class="comment-date muted user-select-none">@comment.CreationDate.ToLocalTime()</div>
                                    <div class="comment-text">@comment.Text</div>
                                </div>
                            }
                        </div>
                        <div class="cardlist-card-icon cardlist-card-icon-edit">
                            <a onclick="toggleEditCardWindow(this)">
                                <span class="fas fa-pencil-alt"></span>
                            </a>
                        </div>
                        <div class="cardlist-card-content">
                            @foreach (var label in card.Labels)
                            {
                                <div class="cardlist-card-label-container">
                                    <div class="cardlist-card-label" style="background-color: @label.Color"></div>
                                </div>
                            }
                            <div class="cardlist-card-name">@card.Name</div>
                            @if (card.Comments.Any())
                            {
                                <div class="cardlist-card-icon cardlist-card-icon-comment">
                                    <span class="fas fa-comment muted"></span>
                                    @card.Comments.Count
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="cardlist-card-new user-select-none" onclick="toggleNewCardWindow(this)">
                <span class="fas fa-plus"></span>
                Új kártya hozzáadása
            </div>
        </div>
    }

    <div class="cardlist-container">
        <div class="cardlist-content cardlist-new-input-container">
            <input class="cardlist-new-input" placeholder="Cím..." maxlength="255" />
            <div class="cardlist-new-control">
                <a class="btn btn-save" onclick="addNewCardList()">Mentés</a>
                <div class="cardlist-icon-cancel muted" onclick="toggleNewCardListWindow()">
                    <span class="fas fa-times"></span>
                </div>
            </div>
        </div>
        <div class="cardlist-content cardlist-new user-select-none" onclick="toggleNewCardListWindow()">
            <span class="fas fa-plus"></span>
            Új lista hozzáadása
        </div>
    </div>
</div>

<div class="helper-divs">
    @* Kártya létrehozás *@
    <div class="empty-card-input">
        <div class="cardlist-card">
            <div class="cardlist-card-name-input user-select-text" contenteditable="true" placeholder="Kártya neve..." spellcheck="false"></div>
        </div>
        <div class="empty-card-input-control">
            <a class="btn btn-save" onclick="addNewCard(this)">Mentés</a>
            <div class="cardlist-icon-cancel" onclick="toggleNewCardWindow()">
                <span class="fas fa-times"></span>
            </div>
        </div>
    </div>

    @* Kártya szerkesztés *@
    <div class="edit-card-input">
        <div class="cardlist-card">
            <div class="cardlist-card-name-input user-select-text" contenteditable="true" placeholder="Kártya neve..." spellcheck="false"></div>
        </div>
        <div class="edit-card-input-control">
            <a class="btn btn-save">Mentés</a>
            <div class="cardlist-icon-cancel muted" onclick="toggleEditCardWindow(this)">
                <span class="fas fa-times"></span>
            </div>
            <div class="cardlist-icon-delete">
                <span class="fas fa-trash"></span>
            </div>
        </div>
    </div>

    @* Kártya mock *@
    <div class="empty-card">
        <div class="cardlist-card">
            <div class="cardlist-card-icon cardlist-card-icon-edit">
                <a onclick="toggleEditCardWindow(this)">
                    <span class="fas fa-pencil-alt"></span>
                </a>
            </div>
            <div class="cardlist-card-content">
                <div class="cardlist-card-name"></div>
            </div>
        </div>
    </div>

    @* Lista mock *@
    <div class="empty-cardlist">
        <div class="cardlist-container">
            <div class="cardlist-header">
                <input class="cardlist-title" maxlength="255" />
                <div class="cardlist-header-menu">
                    <div class="dropdown">
                        <a class="cardlist-header-menu-link muted dropdown-toggle" data-toggle="dropdown">
                            <span class="fas fa-ellipsis-h"></span>
                        </a>
                        <div class="dropdown-menu">
                            <div class="dropdown-header user-select-none">Lista Műveletek</div>
                            <div class="dropdown-divider"></div>
                            <button class="dropdown-item" onclick="clearAllCards(this)">Kártyák ürítése</button>
                            <button class="dropdown-item" onclick="deleteCardList(this)">Törlés</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="cardlist-content"></div>
            <div class="cardlist-card-new" onclick="toggleNewCardWindow(this)">
                <span class="fas fa-plus"></span>
                Új kártya hozzáadása
            </div>
        </div>
    </div>

    @* Kártya nézet mock *@
    <div class="card-details">
        <div class="card-details-header">
            <div class="card-details-icon">
                <span class="fas fa-clipboard icon-large"></span>
            </div>
            <div class="card-details-title user-select-text" contenteditable="true" placeholder="Kártya neve..." spellcheck="false"></div>
            <div class="card-details-icon icon-large card-details-close">
                <span class="fas fa-times"></span>
            </div>
        </div>
        <div class="card-details-body">
            <div class="card-details-side-menu">
                <div class="card-details-side-menu-section muted user-select-none">Műveletek</div>
                <a href="#" class="btn btn-card-action">
                    <span class="fas fa-arrow-right"></span>
                    Mozgatás
                </a>
                <a href="#" class="btn btn-card-action">
                    <span class="fas fa-trash"></span>
                    Törlés
                </a>
            </div>
            <div class="card-details-content">
                <div class="card-details-group">
                    <div class="card-details-icon">
                        <span class="fas fa-bars icon-large"></span>
                    </div>
                    <div class="card-details-label user-select-none">Leírás</div>
                </div>
                <div class="card-details-description-text" contenteditable="true" placeholder="Leírás hozzáadása..." spellcheck="false"></div>

                <div class="card-details-group">
                    <div class="card-details-icon">
                        <span class="fas fa-comments icon-large"></span>
                    </div>
                    <div class="card-details-label user-select-none">Kommentek</div>
                </div>
                <div class="card-details-comments"></div>

                <div class="card-details-group">
                    <div class="card-details-icon">
                        <span class="fas fa-comment-dots icon-large"></span>
                    </div>
                    <div class="card-details-label user-select-none">Új komment</div>
                </div>
                <div class="comment-new">
                    <input class="comment-new-author" maxlength="255" placeholder="Név" />
                    <div class="comment-new-text" contenteditable="true" placeholder="Új komment hozzáadása..." spellcheck="true"></div>
                    <a class="btn btn-save disabled">Mentés</a>
                </div>
            </div>
        </div>
    </div>

    @* Komment mock *@
    <div class="comment">
        <div class="comment-author user-select-none"></div>
        <div class="comment-date muted user-select-none"></div>
        <div class="comment-text user-select-none"></div>
    </div>
</div>
